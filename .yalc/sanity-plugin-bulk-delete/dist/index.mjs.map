{"version":3,"file":"index.mjs","sources":["../src/components/PermissionNotice.tsx","../src/components/DocumentTypeSelect.tsx","../src/components/DocumentList.tsx","../src/components/ConfirmDeleteDialog.tsx","../src/components/BulkDeleteComponent.tsx","../src/plugin.tsx"],"sourcesContent":["import React from 'react'\nimport {Card, Stack, Text} from '@sanity/ui'\nimport type {PermissionNoticeProps} from '../types/BulkDeleteComponent.types'\n\n/**\n * Displays a message if the user does not have permission to use the tool.\n * @param props - PermissionNoticeProps\n * @public\n */\nexport function PermissionNotice({roles}: PermissionNoticeProps) {\n  return (\n    <Card padding={4} radius={3} shadow={1} style={{maxWidth: 500, margin: '2rem auto'}}>\n      <Stack space={4}>\n        <Text size={2} weight=\"semibold\">\n          Tool can only be used by the following roles:{' '}\n          {roles\n            .map(role =>\n              role\n                .split(' ')\n                .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n                .join(' ')\n            )\n            .join(', ')}\n        </Text>\n      </Stack>\n    </Card>\n  )\n}","import React from 'react'\nimport {Flex, Text, Box, Select, Button} from '@sanity/ui'\nimport type {DocumentTypeSelectProps} from '../types/BulkDeleteComponent.types'\n\n/**\n * Dropdown for selecting a document type.\n * @param props - DocumentTypeSelectProps\n * @public\n */\nexport function DocumentTypeSelect({\n  docTypes,\n  selectedType,\n  setSelectedType,\n  forceRender,\n}: DocumentTypeSelectProps) {\n  return (\n    <Flex align=\"center\" gap={2}>\n      <Text>Document Type:</Text>\n      <Box flex={1}>\n        <Select\n          value={selectedType}\n          onChange={e => setSelectedType(e.currentTarget.value)}\n          style={{minWidth: 180}}\n          fontSize={2}\n        >\n          <option value=\"\">Select type</option>\n          {docTypes.map(type => (\n            <option key={type.name} value={type.name}>\n              {type.title}\n            </option>\n          ))}\n        </Select>\n      </Box>\n      <Button\n        mode=\"ghost\"\n        tone=\"primary\"\n        padding={2}\n        style={{minWidth: 0}}\n        onClick={forceRender}\n        disabled={!selectedType}\n        title=\"Force re-render\"\n      >\n        &#x21bb;\n      </Button>\n    </Flex>\n  )\n}","import React from 'react'\nimport {Box, Stack, Flex, Checkbox, Text} from '@sanity/ui'\nimport type {DocumentListProps} from '../types/BulkDeleteComponent.types'\n\n/**\n * List of documents with checkboxes for selection.\n * @param props - DocumentListProps\n * @public\n */\nexport function DocumentList({\n  documentsData,\n  stronglyReferencedDocs,\n  isDocSelected,\n  handleSelectDoc,\n}: DocumentListProps) {\n  return (\n    <Box style={{maxHeight: 300, overflowY: 'auto'}}>\n      <Stack space={2}>\n        {documentsData.map(doc => (\n          <Flex key={doc._id} align=\"center\" gap={2}>\n            <Checkbox checked={isDocSelected(doc)} onChange={() => handleSelectDoc(doc._id)} />\n            <Text\n              style={{\n                color: doc._id.includes('draft')\n                  ? '#b26b00'\n                  : doc._id.includes('versions')\n                  ? '#0074d9'\n                  : '#007a1c',\n                cursor: 'pointer',\n                userSelect: 'none',\n              }}\n              onClick={() => handleSelectDoc(doc._id)}\n              tabIndex={0}\n              role=\"button\"\n              aria-pressed={isDocSelected(doc)}\n              onKeyUp={e => {\n                if (e.key === 'Enter' || e.key === ' ') handleSelectDoc(doc._id)\n              }}\n            >\n              {doc.title || doc.name || doc.prefLabel || doc._id}\n              {doc.hasWeakReferences && (\n                <Text as=\"span\" size={1} style={{marginLeft: 8, color: '#b26b00'}}>\n                  (Has weak reference)\n                </Text>\n              )}\n            </Text>\n          </Flex>\n        ))}\n        {stronglyReferencedDocs.length > 0 && (\n          <>\n            <Box marginTop={3} marginBottom={1}>\n              <Text size={1} weight=\"semibold\" muted>\n                Documents with strong references (cannot delete):\n              </Text>\n            </Box>\n            {stronglyReferencedDocs.map(doc => (\n              <Flex key={doc._id} align=\"center\" gap={2} style={{opacity: 0.5}}>\n                <Checkbox checked={false} disabled />\n                <Text>{doc.title || doc.name || doc.prefLabel || doc._id}</Text>\n              </Flex>\n            ))}\n          </>\n        )}\n      </Stack>\n    </Box>\n  )\n}","import React from 'react'\nimport {Dialog, Flex, Button, Box, Text} from '@sanity/ui'\nimport type {ConfirmDeleteDialogProps} from '../types/BulkDeleteComponent.types'\n\n/**\n * Confirmation dialog for deleting documents.\n * @param props - ConfirmDeleteDialogProps\n * @public\n */\nexport function ConfirmDeleteDialog({\n  show,\n  onCancel,\n  onDelete,\n  loading,\n  count,\n}: ConfirmDeleteDialogProps) {\n  if (!show) return null\n  return (\n    <Dialog\n      id=\"confirm-delete-dialog\"\n      header=\"Confirm Deletion\"\n      onClose={onCancel}\n      width={1}\n      zOffset={1000}\n      footer={\n        <Flex justify=\"flex-end\" gap={2}>\n          <Button text=\"Cancel\" mode=\"bleed\" onClick={onCancel} />\n          <Button text=\"Delete\" tone=\"critical\" loading={loading} onClick={onDelete} />\n        </Flex>\n      }\n    >\n      <Box padding={4}>\n        <Text>\n          Are you sure you want to delete {count} document{count > 1 ? 's' : ''}? This action cannot be undone.\n        </Text>\n      </Box>\n    </Dialog>\n  )\n}","import React, { useEffect, useState, useCallback } from 'react'\nimport { useCurrentUser, useClient, usePerspective, isString } from 'sanity'\nimport { Button, Card, Flex, Spinner, Stack, Text, useToast } from '@sanity/ui'\nimport { defineQuery } from 'groq'\nimport type { BulkDeleteToolOptions } from '../types/BulkDeleteComponent.types'\nimport { PermissionNotice } from './PermissionNotice'\nimport { DocumentTypeSelect } from './DocumentTypeSelect'\nimport { DocumentList } from './DocumentList'\nimport { ConfirmDeleteDialog } from './ConfirmDeleteDialog'\n\n/**\n * BulkDeleteComponent provides a UI for bulk deleting documents in Sanity Studio.\n * @param config - BulkDeleteToolOptions\n * @returns React.ReactElement\n * @public\n */\nexport const BulkDeleteComponent = (config: BulkDeleteToolOptions) => {\n  const { schemaTypes } = config || {}\n  const [docTypes, setDocTypes] = useState<{ name: string; title: string }[]>([])\n  const [selectedType, setSelectedType] = useState<string>('')\n  const [selectedDocs, setSelectedDocs] = useState<Set<{ _id: string; _type: string }>>(new Set())\n  const [loading, setLoading] = useState(false)\n  const [documentsData, setDocumentsData] = useState<any[]>([])\n  const [typesData, setTypesData] = useState<any[]>([])\n  const [_, forceRender] = useState(0)\n  const [stronglyReferencedDocs, setStronglyReferencedDocs] = useState<any[]>([])\n  const [showConfirm, setShowConfirm] = useState(false)\n  const currentUser = useCurrentUser()\n  const perspective = usePerspective()\n  const perspectiveName = perspective.selectedPerspectiveName || perspective.selectedPerspective\n  const sanityClient = useClient({ apiVersion: '2025-05-29' })\n  const toast = useToast()\n\n  // Compute GROQ filter for the current perspective\n  const perspectiveMatch =\n    perspectiveName === 'published'\n      ? `!(_id in path(\"drafts.**\") || _id in path(\"versions.**\")) &&`\n      : perspectiveName === 'drafts'\n        ? `(_id in path(\"drafts.**\")) &&`\n        : isString(perspectiveName)\n          ? `(_id in path(\"versions.${perspectiveName}.**\")) &&`\n          : ''\n\n  // Permission check\n  const isAdmin = currentUser?.roles?.some(\n    (role: any) => role.name === 'administrator' || config.roles?.includes(role.name)\n  )\n  if (!isAdmin) {\n    const roles = config.roles ? Array.from(new Set([...config.roles, 'administrator'])) : ['administrator']\n    return <PermissionNotice roles={roles} />\n  }\n\n  // Helper to fetch documents by reference count\n  const fetchDocuments = async ({\n    type,\n    hasStrongRefs,\n  }: {\n    type: string\n    hasStrongRefs: boolean\n  }) => {\n    const refCountCondition = hasStrongRefs\n      ? 'count(*[references(^._id) && (!defined(_weak) || _weak != true)]) > 0'\n      : 'count(*[references(^._id) && (!defined(_weak) || _weak != true)]) == 0'\n    const extraFields = hasStrongRefs\n      ? ''\n      : ', \"hasWeakReferences\": count(*[references(^._id) && defined(_weak) && _weak == true]) > 0'\n    const query = defineQuery(\n      `*[ ${perspectiveMatch} _type == \"${type}\" && ${refCountCondition}]{_id, _type, title, prefLabel, name${extraFields}}`\n    )\n    return sanityClient.fetch(query, {}, { perspective: 'raw' })\n  }\n\n  // Fetch all unique document types from the dataset\n  useEffect(() => {\n    const fetchTypes = async () => {\n      const query = defineQuery(`array::unique(*[]._type)`)\n      const data = await sanityClient.fetch(query, {}, { perspective: 'raw' })\n      setTypesData(data)\n    }\n    fetchTypes()\n  }, [sanityClient])\n\n  // Fetch documents of the selected type\n  useEffect(() => {\n    if (!selectedType) {\n      setDocumentsData([])\n      setStronglyReferencedDocs([])\n      return\n    }\n    setLoading(true)\n    Promise.all([\n      fetchDocuments({ type: selectedType, hasStrongRefs: false }),\n      fetchDocuments({ type: selectedType, hasStrongRefs: true }),\n    ])\n      .then(([docs, strongRefs]) => {\n        setDocumentsData(docs)\n        setStronglyReferencedDocs(strongRefs)\n      })\n      .finally(() => setLoading(false))\n  }, [selectedType, sanityClient, perspectiveMatch, _])\n\n  // Compute the list of document types available for deletion\n  useEffect(() => {\n    const types =\n      schemaTypes\n        ?.filter((type: any) => type.type === 'document' && !type.hidden)\n        .map((type: any) => ({\n          name: type.name,\n          title: type.title || type.name,\n        }))\n        .sort((a, b) => a.title.localeCompare(b.title)) || []\n    const typesFromQuery = (typesData as string[]).map(name => ({\n      name,\n      title: `Not Found in Schema - ${name}`,\n    }))\n    const mergedTypes = [\n      ...types,\n      ...typesFromQuery.filter(tq => !types.some(t => t.name === tq.name)),\n    ].filter(type => !type.name.includes('.'))\n    setDocTypes(mergedTypes)\n  }, [typesData, schemaTypes])\n\n  // Checks if a document is currently selected\n  const isDocSelected = useCallback(\n    (doc: any) => Array.from(selectedDocs).some(h => h._id === doc._id && h._type === doc._type),\n    [selectedDocs]\n  )\n\n  // Handles selecting or deselecting a single document\n  const handleSelectDoc = useCallback(\n    (id: string) => {\n      setSelectedDocs(prev => {\n        const doc = documentsData.find(d => d._id === id)\n        if (!doc) return prev\n        const exists = Array.from(prev).some(h => h._id === doc._id && h._type === doc._type)\n        const newSet = new Set(prev)\n        if (exists) {\n          Array.from(newSet).forEach(h => {\n            if (h._id === doc._id && h._type === doc._type) newSet.delete(h)\n          })\n        } else {\n          newSet.add({ _id: doc._id, _type: doc._type })\n        }\n        return newSet\n      })\n    },\n    [documentsData]\n  )\n\n  // Handles selecting or deselecting all documents in the current list\n  const handleSelectAll = useCallback(() => {\n    if (selectedDocs.size === documentsData.length) {\n      setSelectedDocs(new Set())\n    } else {\n      setSelectedDocs(new Set(documentsData.map(doc => ({ _id: doc._id, _type: doc._type }))))\n    }\n  }, [selectedDocs, documentsData])\n\n  // Handles deleting all selected documents\n  const handleDelete = useCallback(async () => {\n    setShowConfirm(false)\n    if (selectedDocs.size === 0) return\n    setLoading(true)\n    try {\n      const tx = sanityClient.transaction()\n      Array.from(selectedDocs).forEach(doc => {\n        tx.delete(doc._id)\n      })\n      await tx.commit()\n      toast.push({\n                status: 'success',\n                title: `${selectedDocs.size} Documents Deleted`\n            })\n      setSelectedDocs(new Set())\n      // Refresh documents after deletion\n      const docs = await fetchDocuments({ type: selectedType, hasStrongRefs: false })\n      setDocumentsData(docs)\n    } catch (e) {\n      toast.push({\n        status: 'error',\n        title: 'Error Deleting Documents',\n        description: e instanceof Error ? e.message : String(e)\n      })\n      console.error('Error deleting documents:', e)\n    } finally {\n      setLoading(false)\n    }\n  }, [selectedDocs, sanityClient, selectedType, documentsData, perspectiveMatch])\n\n  return (\n    <Card padding={4} radius={3} shadow={1} style={{ maxWidth: 500, margin: '2rem auto' }}>\n      <Stack space={4}>\n        <Text size={2} weight=\"semibold\">\n          Bulk Delete Documents\n        </Text>\n        <DocumentTypeSelect\n          docTypes={docTypes}\n          selectedType={selectedType}\n          setSelectedType={setSelectedType}\n          forceRender={() => forceRender(n => n + 1)}\n        />\n        {loading && (\n          <Flex align=\"center\" gap={2}>\n            <Spinner muted />\n            <Text>Loading...</Text>\n          </Flex>\n        )}\n        {selectedType && !loading && (\n          <>\n            <Button\n              mode=\"bleed\"\n              tone=\"primary\"\n              onClick={handleSelectAll}\n              disabled={documentsData.length === 0}\n              text={\n                documentsData.length === 0\n                  ? 'No Documents Found'\n                  : selectedDocs.size === documentsData.length\n                    ? 'Deselect All'\n                    : 'Select All'\n              }\n            />\n            <DocumentList\n              documentsData={documentsData}\n              stronglyReferencedDocs={stronglyReferencedDocs}\n              isDocSelected={isDocSelected}\n              handleSelectDoc={handleSelectDoc}\n            />\n            <Button\n              tone=\"critical\"\n              disabled={selectedDocs.size === 0 || loading}\n              onClick={() => setShowConfirm(true)}\n              text={`Delete Selected (${selectedDocs.size})`}\n            />\n            <ConfirmDeleteDialog\n              show={showConfirm}\n              onCancel={() => setShowConfirm(false)}\n              onDelete={handleDelete}\n              loading={loading}\n              count={selectedDocs.size}\n            />\n          </>\n        )}\n      </Stack>\n    </Card>\n  )\n}","import {definePlugin} from 'sanity'\nimport {BulkDeleteComponent} from './components/BulkDeleteComponent'\nimport type {BulkDeleteToolOptions} from './types/BulkDeleteComponent.types'\nimport {ToastProvider} from '@sanity/ui'\n\n/**\n * Sanity plugin definition for the Bulk Delete tool.\n * @public\n */\nexport const BulkDelete = definePlugin<BulkDeleteToolOptions>(config => ({\n  name: 'sanity-plugin-bulk-delete',\n  tools: [\n    {\n      name: 'bulk-delete',\n      title: 'Bulk Delete',\n      component: function BulkDeleteTool() {\n        return (\n          <ToastProvider>\n            <BulkDeleteComponent {...config} />\n          </ToastProvider>\n        )\n      },\n    },\n  ],\n}))"],"names":[],"mappings":";;;;;AASO,SAAS,iBAAiB,EAAC,SAA+B;AAC/D,SACE,oBAAC,MAAA,EAAK,SAAS,GAAG,QAAQ,GAAG,QAAQ,GAAG,OAAO,EAAC,UAAU,KAAK,QAAQ,eACrE,UAAA,oBAAC,OAAA,EAAM,OAAO,GACZ,+BAAC,MAAA,EAAK,MAAM,GAAG,QAAO,YAAW,UAAA;AAAA,IAAA;AAAA,IACe;AAAA,IAC7C,MACE;AAAA,MAAI,CAAA,SACH,KACG,MAAM,GAAG,EACT,IAAI,CAAA,SAAQ,KAAK,OAAO,CAAC,EAAE,YAAA,IAAgB,KAAK,MAAM,CAAC,EAAE,YAAA,CAAa,EACtE,KAAK,GAAG;AAAA,IAAA,EAEZ,KAAK,IAAI;AAAA,EAAA,EAAA,CACd,GACF,GACF;AAEJ;AClBO,SAAS,mBAAmB;AAAA,EACjC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAA4B;AAC1B,SACE,qBAAC,MAAA,EAAK,OAAM,UAAS,KAAK,GACxB,UAAA;AAAA,IAAA,oBAAC,QAAK,UAAA,iBAAA,CAAc;AAAA,IACpB,oBAAC,KAAA,EAAI,MAAM,GACT,UAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,OAAO;AAAA,QACP,UAAU,CAAA,MAAK,gBAAgB,EAAE,cAAc,KAAK;AAAA,QACpD,OAAO,EAAC,UAAU,IAAA;AAAA,QAClB,UAAU;AAAA,QAEV,UAAA;AAAA,UAAA,oBAAC,UAAA,EAAO,OAAM,IAAG,UAAA,eAAW;AAAA,UAC3B,SAAS,IAAI,CAAA,SACZ,oBAAC,UAAA,EAAuB,OAAO,KAAK,MACjC,UAAA,KAAK,MAAA,GADK,KAAK,IAElB,CACD;AAAA,QAAA;AAAA,MAAA;AAAA,IAAA,GAEL;AAAA,IACA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,MAAK;AAAA,QACL,MAAK;AAAA,QACL,SAAS;AAAA,QACT,OAAO,EAAC,UAAU,EAAA;AAAA,QAClB,SAAS;AAAA,QACT,UAAU,CAAC;AAAA,QACX,OAAM;AAAA,QACP,UAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EAED,GACF;AAEJ;ACrCO,SAAS,aAAa;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAsB;AACpB,SACE,oBAAC,KAAA,EAAI,OAAO,EAAC,WAAW,KAAK,WAAW,OAAA,GACtC,UAAA,qBAAC,OAAA,EAAM,OAAO,GACX,UAAA;AAAA,IAAA,cAAc,IAAI,CAAA,QACjB,qBAAC,QAAmB,OAAM,UAAS,KAAK,GACtC,UAAA;AAAA,MAAA,oBAAC,UAAA,EAAS,SAAS,cAAc,GAAG,GAAG,UAAU,MAAM,gBAAgB,IAAI,GAAG,EAAA,CAAG;AAAA,MACjF;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,OAAO;AAAA,YACL,OAAO,IAAI,IAAI,SAAS,OAAO,IAC3B,YACA,IAAI,IAAI,SAAS,UAAU,IAC3B,YACA;AAAA,YACJ,QAAQ;AAAA,YACR,YAAY;AAAA,UAAA;AAAA,UAEd,SAAS,MAAM,gBAAgB,IAAI,GAAG;AAAA,UACtC,UAAU;AAAA,UACV,MAAK;AAAA,UACL,gBAAc,cAAc,GAAG;AAAA,UAC/B,SAAS,CAAA,MAAK;AACZ,aAAI,EAAE,QAAQ,WAAW,EAAE,QAAQ,QAAK,gBAAgB,IAAI,GAAG;AAAA,UACjE;AAAA,UAEC,UAAA;AAAA,YAAA,IAAI,SAAS,IAAI,QAAQ,IAAI,aAAa,IAAI;AAAA,YAC9C,IAAI,qBACH,oBAAC,MAAA,EAAK,IAAG,QAAO,MAAM,GAAG,OAAO,EAAC,YAAY,GAAG,OAAO,UAAA,GAAY,UAAA,uBAAA,CAEnE;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAEJ,KA1BS,IAAI,GA2Bf,CACD;AAAA,IACA,uBAAuB,SAAS,KAC/B,qBAAA,UAAA,EACE,UAAA;AAAA,MAAA,oBAAC,KAAA,EAAI,WAAW,GAAG,cAAc,GAC/B,UAAA,oBAAC,MAAA,EAAK,MAAM,GAAG,QAAO,YAAW,OAAK,IAAC,+DAEvC,GACF;AAAA,MACC,uBAAuB,IAAI,CAAA,QAC1B,qBAAC,MAAA,EAAmB,OAAM,UAAS,KAAK,GAAG,OAAO,EAAC,SAAS,OAC1D,UAAA;AAAA,QAAA,oBAAC,UAAA,EAAS,SAAS,IAAO,UAAQ,IAAC;AAAA,QACnC,oBAAC,QAAM,UAAA,IAAI,SAAS,IAAI,QAAQ,IAAI,aAAa,IAAI,IAAA,CAAI;AAAA,MAAA,EAAA,GAFhD,IAAI,GAGf,CACD;AAAA,IAAA,EAAA,CACH;AAAA,EAAA,EAAA,CAEJ,EAAA,CACF;AAEJ;ACzDO,SAAS,oBAAoB;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAA6B;AAC3B,SAAK,OAEH;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,IAAG;AAAA,MACH,QAAO;AAAA,MACP,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS;AAAA,MACT,QACE,qBAAC,MAAA,EAAK,SAAQ,YAAW,KAAK,GAC5B,UAAA;AAAA,QAAA,oBAAC,UAAO,MAAK,UAAS,MAAK,SAAQ,SAAS,UAAU;AAAA,QACtD,oBAAC,UAAO,MAAK,UAAS,MAAK,YAAW,SAAkB,SAAS,SAAA,CAAU;AAAA,MAAA,GAC7E;AAAA,MAGF,UAAA,oBAAC,KAAA,EAAI,SAAS,GACZ,+BAAC,MAAA,EAAK,UAAA;AAAA,QAAA;AAAA,QAC6B;AAAA,QAAM;AAAA,QAAU,QAAQ,IAAI,MAAM;AAAA,QAAG;AAAA,MAAA,EAAA,CACxE,EAAA,CACF;AAAA,IAAA;AAAA,EAAA,IAnBc;AAsBpB;ACtBO,MAAM,sBAAsB,CAAC,WAAkC;AACpE,QAAM,EAAE,gBAAgB,UAAU,CAAA,GAC5B,CAAC,UAAU,WAAW,IAAI,SAA4C,EAAE,GACxE,CAAC,cAAc,eAAe,IAAI,SAAiB,EAAE,GACrD,CAAC,cAAc,eAAe,IAAI,6BAAkD,IAAA,CAAK,GACzF,CAAC,SAAS,UAAU,IAAI,SAAS,EAAK,GACtC,CAAC,eAAe,gBAAgB,IAAI,SAAgB,CAAA,CAAE,GACtD,CAAC,WAAW,YAAY,IAAI,SAAgB,CAAA,CAAE,GAC9C,CAAC,GAAG,WAAW,IAAI,SAAS,CAAC,GAC7B,CAAC,wBAAwB,yBAAyB,IAAI,SAAgB,CAAA,CAAE,GACxE,CAAC,aAAa,cAAc,IAAI,SAAS,EAAK,GAC9C,cAAc,kBACd,cAAc,eAAA,GACd,kBAAkB,YAAY,2BAA2B,YAAY,qBACrE,eAAe,UAAU,EAAE,YAAY,cAAc,GACrD,QAAQ,SAAA,GAGR,mBACJ,oBAAoB,cAChB,iEACA,oBAAoB,WAClB,kCACA,SAAS,eAAe,IACtB,0BAA0B,eAAe,cACzC;AAMV,MAAI,CAHY,aAAa,OAAO;AAAA,IAClC,CAAC,SAAc,KAAK,SAAS,mBAAmB,OAAO,OAAO,SAAS,KAAK,IAAI;AAAA,EAAA,GAEpE;AACZ,UAAM,QAAQ,OAAO,QAAQ,MAAM,yBAAS,IAAI,CAAC,GAAG,OAAO,OAAO,eAAe,CAAC,CAAC,IAAI,CAAC,eAAe;AACvG,WAAO,oBAAC,oBAAiB,OAAc;AAAA,EACzC;AAGA,QAAM,iBAAiB,OAAO;AAAA,IAC5B;AAAA,IACA;AAAA,EAAA,MAII;AAOJ,UAAM,QAAQ;AAAA,MACZ,MAAM,gBAAgB,cAAc,IAAI,QAPhB,gBACtB,0EACA,wEAK+D,uCAJ/C,gBAChB,KACA,2FAEiH;AAAA,IAAA;AAErH,WAAO,aAAa,MAAM,OAAO,CAAA,GAAI,EAAE,aAAa,OAAO;AAAA,EAC7D;AAGA,YAAU,MAAM;AAMd,KALmB,YAAY;AAC7B,YAAM,QAAQ,YAAY,0BAA0B,GAC9C,OAAO,MAAM,aAAa,MAAM,OAAO,CAAA,GAAI,EAAE,aAAa,OAAO;AACvE,mBAAa,IAAI;AAAA,IACnB,GAAA;AAAA,EAEF,GAAG,CAAC,YAAY,CAAC,GAGjB,UAAU,MAAM;AACd,QAAI,CAAC,cAAc;AACjB,uBAAiB,CAAA,CAAE,GACnB,0BAA0B,EAAE;AAC5B;AAAA,IACF;AACA,eAAW,EAAI,GACf,QAAQ,IAAI;AAAA,MACV,eAAe,EAAE,MAAM,cAAc,eAAe,IAAO;AAAA,MAC3D,eAAe,EAAE,MAAM,cAAc,eAAe,IAAM;AAAA,IAAA,CAC3D,EACE,KAAK,CAAC,CAAC,MAAM,UAAU,MAAM;AAC5B,uBAAiB,IAAI,GACrB,0BAA0B,UAAU;AAAA,IACtC,CAAC,EACA,QAAQ,MAAM,WAAW,EAAK,CAAC;AAAA,EACpC,GAAG,CAAC,cAAc,cAAc,kBAAkB,CAAC,CAAC,GAGpD,UAAU,MAAM;AACd,UAAM,QACJ,aACI,OAAO,CAAC,SAAc,KAAK,SAAS,cAAc,CAAC,KAAK,MAAM,EAC/D,IAAI,CAAC,UAAe;AAAA,MACnB,MAAM,KAAK;AAAA,MACX,OAAO,KAAK,SAAS,KAAK;AAAA,IAAA,EAC1B,EACD,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,cAAc,EAAE,KAAK,CAAC,KAAK,IACjD,iBAAkB,UAAuB,IAAI,CAAA,UAAS;AAAA,MAC1D;AAAA,MACA,OAAO,yBAAyB,IAAI;AAAA,IAAA,EACpC,GACI,cAAc;AAAA,MAClB,GAAG;AAAA,MACH,GAAG,eAAe,OAAO,CAAA,OAAM,CAAC,MAAM,KAAK,CAAA,MAAK,EAAE,SAAS,GAAG,IAAI,CAAC;AAAA,IAAA,EACnE,OAAO,CAAA,SAAQ,CAAC,KAAK,KAAK,SAAS,GAAG,CAAC;AACzC,gBAAY,WAAW;AAAA,EACzB,GAAG,CAAC,WAAW,WAAW,CAAC;AAG3B,QAAM,gBAAgB;AAAA,IACpB,CAAC,QAAa,MAAM,KAAK,YAAY,EAAE,KAAK,CAAA,MAAK,EAAE,QAAQ,IAAI,OAAO,EAAE,UAAU,IAAI,KAAK;AAAA,IAC3F,CAAC,YAAY;AAAA,EAAA,GAIT,kBAAkB;AAAA,IACtB,CAAC,OAAe;AACd,sBAAgB,CAAA,SAAQ;AACtB,cAAM,MAAM,cAAc,KAAK,CAAA,MAAK,EAAE,QAAQ,EAAE;AAChD,YAAI,CAAC,IAAK,QAAO;AACjB,cAAM,SAAS,MAAM,KAAK,IAAI,EAAE,KAAK,OAAK,EAAE,QAAQ,IAAI,OAAO,EAAE,UAAU,IAAI,KAAK,GAC9E,SAAS,IAAI,IAAI,IAAI;AAC3B,eAAI,SACF,MAAM,KAAK,MAAM,EAAE,QAAQ,CAAA,MAAK;AAC1B,YAAE,QAAQ,IAAI,OAAO,EAAE,UAAU,IAAI,SAAO,OAAO,OAAO,CAAC;AAAA,QACjE,CAAC,IAED,OAAO,IAAI,EAAE,KAAK,IAAI,KAAK,OAAO,IAAI,MAAA,CAAO,GAExC;AAAA,MACT,CAAC;AAAA,IACH;AAAA,IACA,CAAC,aAAa;AAAA,EAAA,GAIV,kBAAkB,YAAY,MAAM;AACpC,iBAAa,SAAS,cAAc,SACtC,oCAAoB,KAAK,IAEzB,gBAAgB,IAAI,IAAI,cAAc,IAAI,CAAA,SAAQ,EAAE,KAAK,IAAI,KAAK,OAAO,IAAI,QAAQ,CAAC,CAAC;AAAA,EAE3F,GAAG,CAAC,cAAc,aAAa,CAAC,GAG1B,eAAe,YAAY,YAAY;AAE3C,QADA,eAAe,EAAK,GAChB,aAAa,SAAS,GAC1B;AAAA,iBAAW,EAAI;AACf,UAAI;AACF,cAAM,KAAK,aAAa,YAAA;AACxB,cAAM,KAAK,YAAY,EAAE,QAAQ,CAAA,QAAO;AACtC,aAAG,OAAO,IAAI,GAAG;AAAA,QACnB,CAAC,GACD,MAAM,GAAG,OAAA,GACT,MAAM,KAAK;AAAA,UACD,QAAQ;AAAA,UACR,OAAO,GAAG,aAAa,IAAI;AAAA,QAAA,CAC9B,GACP,gBAAgB,oBAAI,KAAK;AAEzB,cAAM,OAAO,MAAM,eAAe,EAAE,MAAM,cAAc,eAAe,IAAO;AAC9E,yBAAiB,IAAI;AAAA,MACvB,SAAS,GAAG;AACV,cAAM,KAAK;AAAA,UACT,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,aAAa,aAAa,QAAQ,EAAE,UAAU,OAAO,CAAC;AAAA,QAAA,CACvD,GACD,QAAQ,MAAM,6BAA6B,CAAC;AAAA,MAC9C,UAAA;AACE,mBAAW,EAAK;AAAA,MAClB;AAAA,IAAA;AAAA,EACF,GAAG,CAAC,cAAc,cAAc,cAAc,eAAe,gBAAgB,CAAC;AAE9E,6BACG,MAAA,EAAK,SAAS,GAAG,QAAQ,GAAG,QAAQ,GAAG,OAAO,EAAE,UAAU,KAAK,QAAQ,YAAA,GACtE,UAAA,qBAAC,OAAA,EAAM,OAAO,GACZ,UAAA;AAAA,IAAA,oBAAC,MAAA,EAAK,MAAM,GAAG,QAAO,YAAW,UAAA,yBAEjC;AAAA,IACA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA,aAAa,MAAM,YAAY,CAAA,MAAK,IAAI,CAAC;AAAA,MAAA;AAAA,IAAA;AAAA,IAE1C,WACC,qBAAC,MAAA,EAAK,OAAM,UAAS,KAAK,GACxB,UAAA;AAAA,MAAA,oBAAC,SAAA,EAAQ,OAAK,GAAA,CAAC;AAAA,MACf,oBAAC,QAAK,UAAA,aAAA,CAAU;AAAA,IAAA,GAClB;AAAA,IAED,gBAAgB,CAAC,WAChB,qBAAA,UAAA,EACE,UAAA;AAAA,MAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,MAAK;AAAA,UACL,MAAK;AAAA,UACL,SAAS;AAAA,UACT,UAAU,cAAc,WAAW;AAAA,UACnC,MACE,cAAc,WAAW,IACrB,uBACA,aAAa,SAAS,cAAc,SAClC,iBACA;AAAA,QAAA;AAAA,MAAA;AAAA,MAGV;AAAA,QAAC;AAAA,QAAA;AAAA,UACC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QAAA;AAAA,MAAA;AAAA,MAEF;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,MAAK;AAAA,UACL,UAAU,aAAa,SAAS,KAAK;AAAA,UACrC,SAAS,MAAM,eAAe,EAAI;AAAA,UAClC,MAAM,oBAAoB,aAAa,IAAI;AAAA,QAAA;AAAA,MAAA;AAAA,MAE7C;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,MAAM;AAAA,UACN,UAAU,MAAM,eAAe,EAAK;AAAA,UACpC,UAAU;AAAA,UACV;AAAA,UACA,OAAO,aAAa;AAAA,QAAA;AAAA,MAAA;AAAA,IACtB,EAAA,CACF;AAAA,EAAA,EAAA,CAEJ,EAAA,CACF;AAEJ,GC7Oa,aAAa,aAAoC,CAAA,YAAW;AAAA,EACvE,MAAM;AAAA,EACN,OAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,MACP,WAAW,WAA0B;AACnC,mCACG,eAAA,EACC,UAAA,oBAAC,qBAAA,EAAqB,GAAG,QAAQ,GACnC;AAAA,MAEJ;AAAA,IAAA;AAAA,EACF;AAEJ,EAAE;"}