{"version":3,"file":"defaultOptionsValidator.js","sources":["../../src/middleware/defaultOptionsProcessor.ts","../../src/middleware/defaultOptionsValidator.ts"],"sourcesContent":["import type {MiddlewareHooks, RequestOptions} from 'get-it'\n\nconst isReactNative = typeof navigator === 'undefined' ? false : navigator.product === 'ReactNative'\n\nconst defaultOptions = {timeout: isReactNative ? 60000 : 120000} satisfies Partial<RequestOptions>\n\n/** @public */\nexport const processOptions = function processOptions(opts) {\n  const options = {\n    ...defaultOptions,\n    ...(typeof opts === 'string' ? {url: opts} : opts),\n  } satisfies RequestOptions\n\n  // Normalize timeouts\n  options.timeout = normalizeTimeout(options.timeout)\n\n  // Shallow-merge (override) existing query params\n  if (options.query) {\n    const {url, searchParams} = splitUrl(options.url)\n\n    for (const [key, value] of Object.entries(options.query)) {\n      if (value !== undefined) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            searchParams.append(key, v as string)\n          }\n        } else {\n          searchParams.append(key, value as string)\n        }\n      }\n\n      // Merge back params into url\n      const search = searchParams.toString()\n      if (search) {\n        options.url = `${url}?${search}`\n      }\n    }\n  }\n\n  // Implicit POST if we have not specified a method but have a body\n  options.method =\n    options.body && !options.method ? 'POST' : (options.method || 'GET').toUpperCase()\n\n  return options\n} satisfies MiddlewareHooks['processOptions']\n\n/**\n * Given a string URL, extracts the query string and URL from each other, and returns them.\n * Note that we cannot use the `URL` constructor because of old React Native versions which are\n * majorly broken and returns incorrect results:\n *\n * (`new URL('http://foo/?a=b').toString()` == 'http://foo/?a=b/')\n */\nfunction splitUrl(url: string): {url: string; searchParams: URLSearchParams} {\n  const qIndex = url.indexOf('?')\n  if (qIndex === -1) {\n    return {url, searchParams: new URLSearchParams()}\n  }\n\n  const base = url.slice(0, qIndex)\n  const qs = url.slice(qIndex + 1)\n\n  // React Native's URL and URLSearchParams are broken, so passing a string to URLSearchParams\n  // does not work, leading to an empty query string. For other environments, this should be enough\n  if (!isReactNative) {\n    return {url: base, searchParams: new URLSearchParams(qs)}\n  }\n\n  // Sanity-check; we do not know of any environment where this is the case,\n  // but if it is, we should not proceed without giving a descriptive error\n  if (typeof decodeURIComponent !== 'function') {\n    throw new Error(\n      'Broken `URLSearchParams` implementation, and `decodeURIComponent` is not defined',\n    )\n  }\n\n  const params = new URLSearchParams()\n  for (const pair of qs.split('&')) {\n    const [key, value] = pair.split('=')\n    if (key) {\n      params.append(decodeQueryParam(key), decodeQueryParam(value || ''))\n    }\n  }\n\n  return {url: base, searchParams: params}\n}\n\nfunction decodeQueryParam(value: string): string {\n  return decodeURIComponent(value.replace(/\\+/g, ' '))\n}\n\nfunction normalizeTimeout(time: RequestOptions['timeout']) {\n  if (time === false || time === 0) {\n    return false\n  }\n\n  if (time.connect || time.socket) {\n    return time\n  }\n\n  const delay = Number(time)\n  if (isNaN(delay)) {\n    return normalizeTimeout(defaultOptions.timeout)\n  }\n\n  return {connect: delay, socket: delay}\n}\n","import type {MiddlewareHooks} from 'get-it'\n\nconst validUrl = /^https?:\\/\\//i\n\n/** @public */\nexport const validateOptions = function validateOptions(options) {\n  if (!validUrl.test(options.url)) {\n    throw new Error(`\"${options.url}\" is not a valid URL`)\n  }\n} satisfies MiddlewareHooks['validateOptions']\n"],"names":["isReactNative","navigator","product","defaultOptions","timeout","processOptions","opts","options","url","normalizeTimeout","query","searchParams","qIndex","indexOf","URLSearchParams","base","slice","qs","decodeURIComponent","Error","params","pair","split","key","value","append","decodeQueryParam","splitUrl","Object","entries","Array","isArray","v","search","toString","method","body","toUpperCase","replace","time","connect","socket","delay","Number","isNaN","validUrl","validateOptions","test"],"mappings":"AAEA,MAAMA,WAAuBC,UAAc,MAA4C,gBAAtBA,UAAUC,QAErEC,EAAiB,CAACC,QAASJ,EAAgB,IAAQ,MAG5CK,EAAiB,SAAwBC,GACpD,MAAMC,EAAU,IACXJ,KACiB,iBAATG,EAAoB,CAACE,IAAKF,GAAQA,GAO/C,GAHAC,EAAQH,QAAUK,EAAiBF,EAAQH,SAGvCG,EAAQG,MAAO,CACjB,MAAMF,IAACA,EAAAG,aAAKA,GAmChB,SAAkBH,GAChB,MAAMI,EAASJ,EAAIK,QAAQ,KAC3B,IAAe,IAAXD,EACF,MAAO,CAACJ,MAAKG,aAAc,IAAIG,iBAGjC,MAAMC,EAAOP,EAAIQ,MAAM,EAAGJ,GACpBK,EAAKT,EAAIQ,MAAMJ,EAAS,GAI9B,IAAKZ,EACH,MAAO,CAACQ,IAAKO,EAAMJ,aAAc,IAAIG,gBAAgBG,IAKvD,GAAkC,mBAAvBC,mBACT,MAAM,IAAIC,MACR,oFAIJ,MAAMC,EAAS,IAAIN,gBACnB,IAAA,MAAWO,KAAQJ,EAAGK,MAAM,KAAM,CAChC,MAAOC,EAAKC,GAASH,EAAKC,MAAM,KAC5BC,GACFH,EAAOK,OAAOC,EAAiBH,GAAMG,EAAiBF,GAAS,IAAG,CAItE,MAAO,CAAChB,IAAKO,EAAMJ,aAAcS,EACnC,CAnEgCO,CAASpB,EAAQC,KAE7C,IAAA,MAAYe,EAAKC,KAAUI,OAAOC,QAAQtB,EAAQG,OAAQ,CACxD,QAAc,IAAVc,EACF,GAAIM,MAAMC,QAAQP,GAChB,IAAA,MAAWQ,KAAKR,EACdb,EAAac,OAAOF,EAAKS,QAG3BrB,EAAac,OAAOF,EAAKC,GAK7B,MAAMS,EAAStB,EAAauB,WACxBD,IACF1B,EAAQC,IAAM,GAAGA,KAAOyB,IAAM,CAElC,CAIF,OAAA1B,EAAQ4B,OACN5B,EAAQ6B,OAAS7B,EAAQ4B,OAAS,QAAU5B,EAAQ4B,QAAU,OAAOE,cAEhE9B,CACT,EA2CA,SAASmB,EAAiBF,GACxB,OAAON,mBAAmBM,EAAMc,QAAQ,MAAO,KACjD,CAEA,SAAS7B,EAAiB8B,GACxB,IAAa,IAATA,GAA2B,IAATA,EACpB,OAAO,EAGT,GAAIA,EAAKC,SAAWD,EAAKE,OACvB,OAAOF,EAGT,MAAMG,EAAQC,OAAOJ,GACrB,OAAIK,MAAMF,GACDjC,EAAiBN,EAAeC,SAGlC,CAACoC,QAASE,EAAOD,OAAQC,EAClC,CCxGA,MAAMG,EAAW,gBAGJC,EAAkB,SAAyBvC,GACtD,IAAKsC,EAASE,KAAKxC,EAAQC,KACzB,MAAM,IAAIW,MAAM,IAAIZ,EAAQC,0BAEhC"}